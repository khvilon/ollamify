#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è TTS API –Ω–∞ –±–∞–∑–µ Coqui XTTS v2
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_tts.py

–ú–æ–¥–µ–ª—å: Coqui XTTS v2 (Apache 2.0 - –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
"""

import requests
import base64
import wave
import time
from pathlib import Path

# URL TTS —Å–µ—Ä–≤–∏—Å–∞
TTS_URL = "http://localhost:8003"

def test_health():
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è TTS —Å–µ—Ä–≤–∏—Å–∞ (Coqui XTTS v2)...")
    try:
        response = requests.get(f"{TTS_URL}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –ú–æ–¥–µ–ª—å: {data.get('model_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   –õ–∏—Ü–µ–Ω–∑–∏—è: {data.get('license', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {data.get('model_loaded', False)}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data.get('device', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"   CUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {data.get('cuda_available', False)}")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_voices():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤"""
    print("\nüé§ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤ XTTS v2...")
    try:
        response = requests.get(f"{TTS_URL}/voices", timeout=10)
        if response.status_code == 200:
            voices = response.json()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices)}")
            for voice in voices:
                print(f"   - {voice['name']} ({voice['gender']}, {voice['language']}): {voice['description']}")
            return voices
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def test_synthesis(voice="female_1", text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é –ö–æ–∫–∏ –ò–ö–°–¢–ò–¢–ò–≠–° –≤–µ—Ä—Å–∏–∏ –¥–≤–∞.", language="ru"):
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏"""
    print(f"\nüó£Ô∏è –¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –≥–æ–ª–æ—Å–æ–º '{voice}' –Ω–∞ —è–∑—ã–∫–µ '{language}'...")
    print(f"   –¢–µ–∫—Å—Ç: '{text}'")
    
    try:
        payload = {
            "text": text,
            "voice": voice,
            "speed": 1.0,
            "sample_rate": 24000,
            "format": "wav",
            "language": language
        }
        
        start_time = time.time()
        response = requests.post(f"{TTS_URL}/synthesize", json=payload, timeout=60)
        synthesis_time = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            audio_data = base64.b64decode(data['audio_base64'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            output_dir = Path("test_output")
            output_dir.mkdir(exist_ok=True)
            
            filename = f"test_xtts_{voice}_{language}_{int(time.time())}.wav"
            filepath = output_dir / filename
            
            with open(filepath, 'wb') as f:
                f.write(audio_data)
            
            print(f"‚úÖ –°–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
            print(f"   –í—Ä–µ–º—è —Å–∏–Ω—Ç–µ–∑–∞: {synthesis_time:.2f}—Å")
            print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {data['duration_ms']}–º—Å")
            print(f"   –ß–∞—Å—Ç–æ—Ç–∞: {data['sample_rate']}Hz")
            print(f"   –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(audio_data)} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º RTF (Real Time Factor)
            audio_duration_sec = data['duration_ms'] / 1000
            rtf = synthesis_time / audio_duration_sec if audio_duration_sec > 0 else 0
            print(f"   RTF (Real Time Factor): {rtf:.2f} ({'–±—ã—Å—Ç—Ä–µ–µ' if rtf < 1 else '–º–µ–¥–ª–µ–Ω–Ω–µ–µ'} —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)")
            
            return True
        else:
            error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else response.text
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
            print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_stream_synthesis(voice="male_1", text="–≠—Ç–æ —Ç–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é –ò–ö–°–¢–¢–°.", language="ru"):
    """–¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞"""
    print(f"\nüåä –¢–µ—Å—Ç –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ –≥–æ–ª–æ—Å–æ–º '{voice}'...")
    
    try:
        payload = {
            "text": text,
            "voice": voice,
            "speed": 1.2,
            "sample_rate": 24000,
            "language": language
        }
        
        start_time = time.time()
        response = requests.post(f"{TTS_URL}/synthesize/stream", json=payload, timeout=60)
        synthesis_time = time.time() - start_time
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            output_dir = Path("test_output")
            output_dir.mkdir(exist_ok=True)
            
            filename = f"stream_xtts_{voice}_{int(time.time())}.wav"
            filepath = output_dir / filename
            
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π —Å–∏–Ω—Ç–µ–∑ —É—Å–ø–µ—à–µ–Ω")
            print(f"   –í—Ä–µ–º—è —Å–∏–Ω—Ç–µ–∑–∞: {synthesis_time:.2f}—Å")
            print(f"   –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_different_voices():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ XTTS v2"""
    print("\nüé≠ –¢–µ—Å—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ XTTS v2...")
    
    voices_to_test = ["female_1", "female_2", "male_1", "male_2"]
    
    for voice in voices_to_test:
        if "female" in voice:
            text = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {voice.replace('_', ' ')}, –∏ —è –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –≤ —Å–∏—Å—Ç–µ–º–µ –ò–ö–°–¢–¢–° –≤–µ—Ä—Å–∏–∏ –¥–≤–∞."
        else:
            text = f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {voice.replace('_', ' ')}, –∏ —è –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –≤ —Å–∏—Å—Ç–µ–º–µ –ò–ö–°–¢–¢–° –≤–µ—Ä—Å–∏–∏ –¥–≤–∞."
        
        test_synthesis(voice, text)
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

def test_multilingual():
    """–¢–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏"""
    print("\nüåç –¢–µ—Å—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π...")
    
    test_cases = [
        ("ru", "female_1", "–≠—Ç–æ —Ç–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –∂–µ–Ω—Å–∫–∏–º –≥–æ–ª–æ—Å–æ–º."),
        ("en", "male_1", "This is a test of English language with male voice."),
        ("es", "female_2", "Esta es una prueba del idioma espa√±ol con voz femenina."),
        ("fr", "male_2", "Ceci est un test de la langue fran√ßaise avec une voix masculine.")
    ]
    
    for language, voice, text in test_cases:
        print(f"\n   –¢–µ—Å—Ç —è–∑—ã–∫–∞: {language}")
        test_synthesis(voice, text, language)
        time.sleep(1)

def test_speed_variations():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π"""
    print("\n‚ö° –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π XTTS v2...")
    
    speeds = [0.5, 0.8, 1.0, 1.5, 2.0]
    
    for speed in speeds:
        print(f"\n   –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed}x...")
        payload = {
            "text": f"–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–µ—á–∏ {speed} —Ä–∞–∑–∞ –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Å –ø–æ–º–æ—â—å—é –ò–ö–°–¢–¢–°.",
            "voice": "female_1",
            "speed": speed,
            "sample_rate": 24000,
            "language": "ru"
        }
        
        try:
            response = requests.post(f"{TTS_URL}/synthesize", json=payload, timeout=60)
            if response.status_code == 200:
                print(f"   ‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å {speed}x —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed}x")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

def test_commercial_license():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏"""
    print("\nüíº –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏...")
    
    try:
        response = requests.get(f"{TTS_URL}/", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –ú–æ–¥–µ–ª—å: {data.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è: {data.get('license', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {', '.join(data.get('features', []))}")
            print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {len(data.get('supported_languages', []))} —è–∑—ã–∫–æ–≤")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Coqui XTTS v2 TTS API")
    print("üìú –õ–∏—Ü–µ–Ω–∑–∏—è: Apache 2.0 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
    if not test_health():
        print("\n‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
    test_commercial_license()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
    voices = test_voices()
    
    if not voices:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤")
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_synthesis()
    test_stream_synthesis()
    test_different_voices()
    test_multilingual()
    test_speed_variations()
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üìÅ –ê—É–¥–∏–æ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'test_output'")
    print("üíº –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    main() 