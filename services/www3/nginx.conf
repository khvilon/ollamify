resolver 127.0.0.11;

server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Enable debug logging
    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log;

    # Set character encoding
    charset utf-8;
    source_charset utf-8;
    charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

    # Global settings for file uploads
    client_body_buffer_size 100M;
    client_max_body_size 100M;
    large_client_header_buffers 4 32k;

    # Handle client-side routing
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-store, no-cache, must-revalidate";
    }

    # Login endpoint - no auth required, direct proxy to auth service
    location /auth/login {
        proxy_pass http://auth:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle CORS
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

    # Internal auth verification endpoint
    location = /auth/verify {
        internal;
        proxy_method POST;
        proxy_pass http://auth:80;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
        
        # Do not pass request body to auth service
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        
        # Shorter timeouts for auth requests since they should be quick
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        
        # Disable keepalive for auth requests
        proxy_set_header Connection "close";
    }

    # OpenAI API endpoint
    location = /api/v1/chat/completions {
        auth_request /auth/verify;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_user $upstream_http_x_user;

        # Handle errors from auth_request
        error_page 401 = @error401;
        error_page 403 = @error403;
        error_page 500 = @error500;

        # Pass user info from auth service
        proxy_set_header X-User $auth_user;

        # Proxy settings for API requests
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;

        # Increase timeouts for API requests
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        send_timeout 600s;

        # Disable buffering for streaming responses
        proxy_buffering off;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Route to our internal endpoint
        proxy_pass http://zeus:80/api/ai/complete;
    }

    # Protected API endpoints
    location /api/ {
        auth_request /auth/verify;
        auth_request_set $auth_status $upstream_status;
        auth_request_set $auth_user $upstream_http_x_user;

        # Handle errors from auth_request
        error_page 401 = @error401;
        error_page 403 = @error403;
        error_page 500 = @error500;

        # Pass user info from auth service
        proxy_set_header X-User $auth_user;

        # Proxy settings for API requests
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Authorization $http_authorization;

        # Increase timeouts for API requests
        proxy_connect_timeout 600s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;
        send_timeout 600s;

        # Disable buffering for streaming responses
        proxy_buffering off;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Rewrite OpenAI API paths to our internal endpoints
        # Removed rewrite rule for OpenAI API endpoint

        # Route all API requests to zeus service
        proxy_pass http://zeus:80;
    }

    # Error handlers
    location @error401 {
        return 401 '{"error": "Unauthorized", "code": "AUTH_REQUIRED"}';
    }

    location @error403 {
        return 403 '{"error": "Forbidden", "code": "ACCESS_DENIED"}';
    }

    location @error500 {
        return 500 '{"error": "Internal Server Error", "code": "SERVER_ERROR"}';
    }
}
