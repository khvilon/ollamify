services:
  zeus:
    build:
      context: .
      dockerfile: services/zeus/Dockerfile
    volumes:
      - ./.env:/app/.env
      - ./services/zeus/src:/app/src
    depends_on:
      db:
        condition: service_healthy
      vector-db:
        condition: service_started
      ollama:
        condition: service_healthy
      reranker:
        condition: service_started
      frida:
        condition: service_started
      tts:
        condition: service_started
      stt:
        condition: service_started
    environment:
      - ZEUS_PORT=80
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=db
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL}
      - OPENROUTER_URL=${OPENROUTER_URL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - QDRANT_HOST=vector-db
      - QDRANT_PORT=6333
    expose:
      - "80"
    container_name: zeus
    networks:
      - app-network

  db:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./services/vector-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ## for debug purposes only
    #ports:
    #  - "${POSTGRES_PORT:-5432}:5432"
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    container_name: db
    networks:
      - app-network

  vector-db:
    build:
      context: ./services/vector-db
      dockerfile: Dockerfile
    volumes:
      - qdrant_data:/qdrant/storage
      - ./services/vector-db/config.yaml:/qdrant/config/production.yaml
    ports:
      - "6333:6333"
    expose:
      - "6333"
      - "6334"
    container_name: vector-db
    networks:
      - app-network

  frida:
    build:
      context: ./services/frida
      dockerfile: Dockerfile
    volumes:
      - frida_models:/app/models
    ports:
      - "8002:8002"
    expose:
      - "8002"
    container_name: frida
    networks:
      - app-network

  reranker:
    build:
      context: ./services/reranker
      dockerfile: Dockerfile
    volumes:
      - reranker_models:/app/models
      - ./services/reranker/app.py:/app/app.py
    ports:
      - "8001:8001"
    expose:
      - "8001"
    environment:
      - RERANKER_MODEL=${RERANKER_MODEL}
      - PORT=8001
      - TRANSFORMERS_CACHE=/app/models
    container_name: reranker
    networks:
      - app-network

  ollama:
    build:
      context: .
      dockerfile: services/ollama/Dockerfile
    volumes:
      - ollama_data:/root/.ollama
    expose:
      - "11434"
    healthcheck:
      test: ["CMD", "pgrep", "ollama"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
    container_name: ollama
    networks:
      - app-network

  auth:
    container_name: auth
    build: ./services/auth
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      JWT_SECRET: ${JWT_SECRET}
      AUTH_PORT: 80
    expose:
      - "80"
    depends_on:
      - db
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  www3:
    build:
      context: ./services/www3
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - zeus
      - auth
    volumes:
      - ./services/www3:/usr/share/nginx/html
      - ./services/www3/nginx.conf:/etc/nginx/conf.d/default.conf
    container_name: www3
    networks:
      - app-network

  tts:
    build:
      context: ./services/tts
      dockerfile: Dockerfile
    volumes:
      - tts_models:/app/models
    ports:
      - "8003:8003"
    expose:
      - "8003"
    environment:
      - PORT=8003
      - TORCH_HOME=/app/models
      - HF_HOME=/app/models
      - TRANSFORMERS_CACHE=/app/models
    container_name: tts
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  stt:
    build:
      context: ./services/stt
      dockerfile: Dockerfile
    volumes:
      - stt_models:/app/models
    ports:
      - "8004:8004"
    expose:
      - "8004"
    environment:
      - PORT=8004
      - WHISPER_CACHE=/app/models
      - TORCH_HOME=/app/models
      - HF_HOME=/app/models
    container_name: stt
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

volumes:
  pg_data:
  qdrant_data:
  ollama_data:
  frida_models:
  reranker_models:
    name: ollamify-reranker-models
  tts_models:
    name: ollamify-tts-models
  stt_models:
    name: ollamify-stt-models

networks:
  app-network:
    driver: bridge
    name: app-network
